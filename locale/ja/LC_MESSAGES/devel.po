# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016, Enthought Inc.
# This file is distributed under the same license as the tvtk package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvtk 4.8.1.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-18 01:49+0000\n"
"PO-Revision-Date: 2020-05-29 23:27+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/tkoyama010/teams/110414/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/tvtk/devel.txt:3
msgid "Development guide for TVTK"
msgstr "TVTK開発ガイド"

#: ../../mayavi/docs/source/tvtk/devel.txt:0
msgid "Author"
msgstr "作者"

#: ../../mayavi/docs/source/tvtk/devel.txt:4
msgid "Prabhu Ramachandran"
msgstr "Prabhu Ramachandran"

#: ../../mayavi/docs/source/tvtk/devel.txt:0
msgid "Contact"
msgstr "連絡先"

#: ../../mayavi/docs/source/tvtk/devel.txt:5
msgid "prabhu_r@users.sourceforge.net"
msgstr "prabhu_r@users.sourceforge.net"

#: ../../mayavi/docs/source/tvtk/devel.txt:0
msgid "Copyright"
msgstr "Copyright"

#: ../../mayavi/docs/source/tvtk/devel.txt:6
msgid "2004-2020, Enthought, Inc."
msgstr "2004-2020, Enthought, Inc."

#: ../../mayavi/docs/source/tvtk/devel.txt:9
msgid "Contents"
msgstr "目次"

#: ../../mayavi/docs/source/tvtk/devel.txt:12
msgid "Introduction"
msgstr "はじめに"

#: ../../mayavi/docs/source/tvtk/devel.txt:14
msgid ""
"This document provides some details on how TVTK works and how it is "
"implemented.  Basic documentation on the installation, features and usage of"
" tvtk is provided in the README.txt file that should be in the same "
"directory as this file."
msgstr ""
"このドキュメントでは，TVTKがどのように動作し，どのように実装されるかについての詳細を説明します．tvtkのインストール，機能，使用法に関する基本的な文書は，このファイルと同じディレクトリにあるREADME.txtファイルにあります．"

#: ../../mayavi/docs/source/tvtk/devel.txt:21
msgid "How tvtk works"
msgstr "tvtkの動作"

#: ../../mayavi/docs/source/tvtk/devel.txt:23
msgid ""
"All tvtk classes derive from `TVTKBase`.  This is defined in `tvtk_base.py`."
"  `TVTKBase` provides basic functionality common to all tvtk classes.  Most "
"importantly it provides for the following:"
msgstr ""
"すべてのtvtkクラスは `TVTKBase` から派生します．これは `tvtk_base.py` で定義されます． `TVTKBase` "
"は，すべてのtvtkクラスに共通の基本機能を提供します．最も重要なのは，次の機能を提供することです．"

#: ../../mayavi/docs/source/tvtk/devel.txt:27
msgid ""
"Allows one to wrap an existing VTK object or create a new one. "
"`TVTKBase.__init__` accepts an optional VTK object, that can be used to wrap"
" an existing VTK object.  Read the method docstring for more details."
msgstr ""
"既存のVTKオブジェクトをラップしたり，新しいVTKオブジェクトを作成したりできます． `TVTKBase.__init__` "
"は，既存のVTKオブジェクトをラップするために使用することができるオプションのVTKオブジェクトを受け入れます．詳細はメソッドdocstringを読んでください．"

#: ../../mayavi/docs/source/tvtk/devel.txt:32
msgid ""
"Sets up the event handlers that allow us to listen to any changes made to "
"the underlying VTK object."
msgstr "基礎となるVTKオブジェクトに加えられた変更を伺うためのイベントハンドラを設定します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:35
msgid "Basic support for pickling the object."
msgstr "オブジェクトを選択するための基本的なサポート．"

#: ../../mayavi/docs/source/tvtk/devel.txt:37
msgid ""
"The `update_traits` automatically updates the traits of the tvtk class such "
"that they reflect the state of the underlying VTK object."
msgstr "`update_traits` は，基礎となるVTKオブジェクトの状態を反映するように，tvtkクラスの特性を自動的に更新します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:41
msgid ""
"Common code to change the underlying VTK object when the trait is changed."
msgstr "traitが変更されたときに，その背後にあるVTKオブジェクトを変更するための共通コード．"

#: ../../mayavi/docs/source/tvtk/devel.txt:44
msgid ""
"As mentioned above, tvtk classes can either wrap an existing VTK object or "
"create a new one and manage the new object."
msgstr ""
"前述のように，tvtkクラスは既存のVTKオブジェクトをラップすることも，新しいVTKオブジェクトを作成して新しいオブジェクトを管理することもできます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:49
msgid "Automatic trait updation"
msgstr "traitの自動更新"

#: ../../mayavi/docs/source/tvtk/devel.txt:51
msgid ""
"One very important feature of tvtk objects is that any VTK related traits of"
" object are dynamically updated if the underlying VTK object is changed.  "
"This is achieved by adding an observer to the VTK object that effectively "
"calls TVTKBase.update_traits when the 'ModifiedEvent' is invoked.  Here is "
"an example of a VTK observer callback::"
msgstr ""
"tvtkオブジェクトの非常に重要な特徴の1つは，オブジェクトのVTKに関連する特徴が，その背後にあるVTKオブジェクトが変更されると動的に更新されることです．これは，"
" 'ModifiedEvent' が呼び出されたときに TVTKBase.update_traits "
"を効果的に呼び出すVTKオブジェクトにオブザーバを追加することによって達成される．VTKオブザーバコールバックの例を次に示します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:67
msgid ""
"As can be seen, when the property is modified, the callback is called. The "
"trouble with this approach is that `p` now holds a reference to `cb`.  Thus "
"if `cb` were the `update_traits` method of the tvtk class that manages the "
"VTK object, we run into a non-garbage-collectable reference cycle issue and "
"a huge memory leak.  To get around this we use the functionality provided by"
" `messenger.py`.  Effectively, `TVTKBase.__init__` tells messenger to call "
"`self.update_traits` when it is called back from the VTK object.  Messenger "
"itself uses `weakrefs` so the reference cycle problem does not exist.  The "
"VTK object basically calls `messenger.send` and `messenger` takes care of "
"the rest.  This allows the tvtk class to be safely used and also allows for "
"automatic trait updation."
msgstr ""
"このように，プロパティが変更されると，コールバックが呼び出されます．このアプローチの問題点は， `p` が `cb` "
"への参照を保持していることです．したがって， `cb` がVTKオブジェクトを管理するtvtkクラスの `update_traits` "
"メソッドである場合，ガベージ収集不能な参照サイクルの問題と大量のメモリリークが発生します．この問題を回避するには， `messenger.py` "
"が提供する機能を使用します．`TVTKBase.__init__` は実質的に，VTKオブジェクトから呼び出されたときに "
"`self.update_traits` を呼び出すようメッセンジャーに指示します．Messenger自体は `weakrefs` "
"を使用するため，参照サイクルの問題はありません．VTKオブジェクトは基本的に `messenger.send` を呼び出し，残りは "
"`messenger` が処理します．これにより，tvtkクラスを安全に使用することができ，traitを自動的に更新することもできます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:80
msgid ""
"Each tvtk class has an attribute called `_updateable_traits_`.  This is a "
"tuple of tuples.  Each tuple contains a pair of strings like so::"
msgstr ""
"各tvtkクラスには `_updateable_traits_` "
"という属性があります．これはタプルのタプルです．各タプルには以下のような文字列のペアが含まれています::"

#: ../../mayavi/docs/source/tvtk/devel.txt:90
msgid ""
"The first string is the name of the trait and the second the name of the "
"function used to obtain the value of the trait from the VTK object. "
"`TVTKBase.update_traits` uses this tuple and for each trait it calls the "
"relevant VTK 'get' function and updates the value of the trait."
msgstr ""
"最初の文字列はtraitの名前で，2番目の文字列はVTKオブジェクトからtraitの値を取得するために使用される関数の名前です． "
"`TVTKBase.update_traits` はこのタプルを使用し，それぞれの特性について，関連するVTK 'get' "
"関数を呼び出し，特性の値を更新します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:96
msgid ""
"While this whole process seems to be inefficient, it actually works quite "
"well in practice and does not appear to be slow at all."
msgstr "​このプロセス全体は効率的ではないように見えますが，実際には非常にうまく機能し，まったく遅くはないように見えます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:101
msgid "Messaging"
msgstr "メッセージング"

#: ../../mayavi/docs/source/tvtk/devel.txt:103
msgid ""
"The messaging functionality is defined in `tvtk/messenger.py`.  Unit tests "
"are in the 'tests/' directory.  As described in the previous section, tvtk "
"objects use the messenger functionality to ensure that the traits are always"
" up to date.  `messenger.py` is well documented and tested.  So please read "
"the docstrings for more details.  Here is some basic information from the "
"documentation."
msgstr ""
"メッセージング機能は `tvtk/messenger.py` で定義されます．ユニットテストは 'tests/' "
"ディレクトリにあります．前のセクションで説明したように，tvtkオブジェクトはメッセンジャー機能を使用して，traitが常に最新であることを保証します．"
" `messenger.py` "
"は十分に文書化され，テストされています．詳細はdocstringsを参照してください．ここでは，ドキュメントからの基本的な情報を示します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:110
msgid ""
"`messenger.py` implements a simple, robust, safe, `Messenger` class that "
"allows one to register callbacks for a signal/slot (or event/handler) kind "
"of messaging system.  One can basically register a callback function/method "
"to be called when an object sends a particular event.  The Messenger class "
"is Borg.  So it is easy to instantiate and use.  This module is also reload-"
"safe, so if the module is reloaded the callback information is not lost.  "
"Method callbacks do not have a reference counting problem since weak "
"references are used.  The main functionality is provided by three functions,"
" `connect`, `disconnect` and `send`."
msgstr ""
"`messenger.py` はシンプルで堅牢で安全な `Messenger` "
"クラスを実装しており，シグナル/スロット(またはイベント/ハンドラ)のようなメッセージングシステム用のコールバックを登録できます．基本的には，オブジェクトが特定のイベントを送信するときにコールされるコールバック関数/メソッドを登録できます．MessengerクラスはBorgです．したがって，インスタンス化と使用は簡単です．このモジュールはリロードに対しても安全なので，モジュールをリロードしてもコールバック情報は失われません．メソッド・コールバックには，弱参照が使用されるため，参照カウントの問題はありません．主な機能は"
" `connect` ， `disconnect` ， `send` の3つである．"

#: ../../mayavi/docs/source/tvtk/devel.txt:121
msgid ""
"`connect` basically allows one to connect an object, `obj`, that emits an "
"event, `event` to a callback function, `callback`."
msgstr ""
"`connect` は基本的に，イベント `event` を発生させるオブジェクト  `obj` をコールバック関数 `callback` "
"に接続することを許可します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:124
msgid ""
"When an object calls `send`, it passes itself, the event it wishes to emit "
"along with any optional arguments and keyword arguments to send. All "
"registered `callback` for the particular event are called with the the "
"object that called it (`obj`), the event (`event`) and the optional "
"arguments."
msgstr ""
"オブジェクトが `send` を呼び出す時，送出したいイベントをオプションの引数とキーワード引数と一緒に渡します．特定のイベント用に登録されたすべての "
"`callback` は，それを呼び出したオブジェクト ( `obj` ) ，イベント ( `event` ) "
"，およびオプションの引数とともに呼び出されます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:130
msgid ""
"`disconnect` allows one to disconnect either a particular callback, or all "
"callbacks for a particular event or the entire object."
msgstr "`disconnect` では，特定のコールバック，特定のイベントまたはオブジェクト全体のすべてのコールバックのいずれかを切断できます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:133
msgid ""
"The messenger class thus provides a simple observer pattern implementation "
"that makes it easy to do inter-object communication. For further details "
"please read the code and docstrings.  Also look at the test suite in "
"`tests/test_messenger.py`."
msgstr ""
"このように，メッセンジャー・クラスは，オブジェクト間通信を容易にする単純なオブザーバー・パターン実装を提供します．詳細については，コードとdocstringを参照してください．"
" `tests/test_messenger.py` のテストスイートも見てください．"

#: ../../mayavi/docs/source/tvtk/devel.txt:140
msgid "Pickling"
msgstr "ピックリング"

#: ../../mayavi/docs/source/tvtk/devel.txt:142
msgid ""
"`TVTKBase` provides the basic functionality for pickling. Essentially, the "
"dictionary (`self.__dict__`) of the tvtk object is pickled.  The `_vtk_obj` "
"attribute is not pickled since VTK objects are not picklable.  Other "
"irrelevant attributes are also removed. `__setstate__` works even on a live "
"object by checking to see if `self._vtk_obj` exists.  Some of the tvtk "
"classes override these methods to implement them better.  For example look "
"at the code for the `Matrix4x4` class."
msgstr ""
"`TVTKBase` は酸洗いの基本機能を提供します．基本的に，tvtkオブジェクトの辞書 ( `self.__dict__` ) "
"はpickle化されます．VTKオブジェクトはピック可能ではないため， `_vtk_obj` "
"属性はピックされません．その他の無関係なアトリビュートも除去されます． `__setstate__` は， `self._vtk_obj` "
"が存在するかどうかをチェックすることによって，ライブオブジェクトに対しても機能します．一部のtvtkクラスは，これらのメソッドをオーバーライドして，より適切に実装します．例えば，"
" `Matrix4x4` クラスのコードを見てください．"

#: ../../mayavi/docs/source/tvtk/devel.txt:153
msgid "Array handling"
msgstr "配列の処理"

#: ../../mayavi/docs/source/tvtk/devel.txt:155
msgid ""
"TVTK lets the user pass Numeric arrays/Python lists in place of the "
"`DataArray`, `CellArray`, `Points` etc. classes.  This is done by finding "
"the call signature of the wrapped VTK method, checking to see if it has an "
"array and then intelligently generating the appropriate VTK array data using"
" the signature information.  This generated VTK data array is then passed to"
" the wrapped function under the covers. This functionality also works if the"
" method has multiple call signatures (overloaded VTK method) and one of them"
" involves arrays. The main functions to do this conversion magic are in the "
"`array_handler.py` module.  The `wrapper_gen.py` module generates the "
"appropriate wrapper code depending on the call signature.  So if a method "
"has no VTK objects in its signature, no wrapping is necessary. If it only "
"has non-array VTK objects, then array handling is unnecessary but one must "
"dereference the VTK object from the passed tvtk wrapper object.  If the call"
" signature involves VTK array objects, then any Numeric arrays or Python "
"lists are converted to the correct VTK data array and passed to the wrapped "
"VTK object."
msgstr ""
"TVTKを使用すると， `DataArray` ， `CellArray` ， `Points` "
"などのクラスの代わりに数値配列/Pythonリストを渡すことができます．これは，ラップされたVTKメソッドの呼び出しシグニチャーを見つけ，それが配列を持っているかどうかをチェックし，シグニチャー情報を使用して適切なVTK配列データをインテリジェントに生成することによって行われます．この生成されたVTKデータ配列は，ラップされた関数に渡されます．この機能は，メソッドに複数の呼び出しシグネチャ(過負荷VTK法)があり，そのいずれかに配列が含まれる場合にも機能します．この変換マジックを行う主な関数は，"
" `array_handler.py` モジュールにあります． `wrapper_gen.py` "
"モジュールは，呼び出しシグニチャーに応じて適切なラッパー・コードを生成します．したがって，メソッドのシグネチャにVTKオブジェクトが含まれていない場合，ラッピングは必要ありません．配列以外のVTKオブジェクトしか持っていない場合，配列の処理は不要ですが，渡されたtvtkラッパーオブジェクトからVTKオブジェクトを間接参照しなければなりません．呼び出しシグネチャにVTK配列オブジェクトが含まれる場合，数値配列またはPythonリストは正しいVTKデータ配列に変換され，ラップされたVTKオブジェクトに渡されます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:173
msgid ""
"For the efficient conversion to `CellArray` objects, an extension module is "
"required.  The sources for this extension module are in `src/array_ext.*`.  "
"The Cython_ file can be used to generate the `src/array_ext.c` file like "
"so::"
msgstr ""
"`CellArray` オブジェクトへの効率的な変換のために，拡張モジュールが必要です．この拡張モジュールのソースは `src/array_ext.*`"
" にあります．Cython_fileは `src/array_ext.c` ファイルを生成するために以下のように使うことができます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:181
msgid ""
"The sources ship with the generated source file so that folks without Cython"
" can build it."
msgstr "ソースには生成されたソース・ファイルが付属しているため，Cythonを使用していないユーザーでもソース・ファイルを構築できます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:184
msgid ""
"`special_gen.py` defines all the additional methods for the `DataArray` and "
"other classes that allow these objects to support iteration, `__repr__`, "
"`__getitem__` etc."
msgstr ""
"`special_gen.py` は， `DataArray` と，これらのオブジェクトが反復， `__repr__` ， `__getitem__` "
"などをサポートすることを可能にする他のクラスのためのすべての追加のメソッドを定義します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:193
msgid "The magical `tvtk` instance"
msgstr "魔法の `tvtk` インスタンス"

#: ../../mayavi/docs/source/tvtk/devel.txt:195
msgid "When one does the following::"
msgstr "次のような場合::"

#: ../../mayavi/docs/source/tvtk/devel.txt:199
msgid ""
"The imported `tvtk` is really an instance of a class and not a module! This "
"is so because, the tvtk classes are almost 800 in number and they wrap "
"around the *entire* VTK API.  VTK itself allows one to import all the "
"defined classes in one go.  That is, if one does `import vtk`, one can "
"instantiate all VTK related classes.  This is very useful functionality.  "
"However, importing 800 wrapper classes in one go is *extremely* slow.  Thus,"
" `tvtk` provides a convenient solution to get around the problem.  While "
"`tvtk` is a class instance, it behaves just like you'd expect of a module."
msgstr ""
"インポートされた `tvtk` は，実際にはクラスのインスタンスであり，モジュールではありません．これは，tvtkクラスの数がほぼ800であり，VTK "
"API *全体* をラップしているためです．VTK自体では，定義されたすべてのクラスを一度にインポートすることができます．つまり，  `import "
"vtk` "
"を行うと，すべてのVTK関連クラスをインスタンス化することができます．これは非常に便利な機能です．しかし，800個のラッパークラスを一度にインポートすると，"
" *非常に* 時間がかかります．したがって， `tvtk` は問題を回避するための便利なソリューションを提供します． `tvtk` "
"はクラス・インスタンスですが，モジュールの場合と同様に動作します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:209
msgid "It supports tab-completion on class names."
msgstr "クラス名のタブ補完をサポートします．"

#: ../../mayavi/docs/source/tvtk/devel.txt:210
msgid "Allows one to access all the tvtk classes."
msgstr "すべてのtvtkクラスへのアクセスを許可します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:211
msgid ""
"Imports extremely fast.  Any slowness in the import is really because tvtk "
"needs to import VTK.  Thus importing tvtk should not be much slower than "
"importing vtk itself."
msgstr ""
"インポートは非常に速い．インポートが遅くなるのは，実際にはtvtkがVTKをインポートする必要があるためです．したがって，tvtkのインポートはvtk自体のインポートよりもそれほど遅くないはずです．"

#: ../../mayavi/docs/source/tvtk/devel.txt:214
msgid "Imports the tvtk classes *only* on demand."
msgstr "tvtkクラスをオンデマンドで *のみ* インポートします．"

#: ../../mayavi/docs/source/tvtk/devel.txt:216
msgid ""
"All the tvtk related code is generated and saved into the `tvtk_classes.zip`"
" file.  The `tvtk` instance is basically an instance of the TVTK class.  "
"This is defined in `tvtk_helper.py`.  This file is inside the ZIP file.  For"
" each wrapped VTK class, TVTK defines a property having the name of the "
"wrapper tvtk class.  The `get` method of the property basically returns the "
"class after importing it dynamically from the ZIP file.  This is done in the"
" `get_class` function.  Each class thus imported is cached (in `_cache`) and"
" if a cached copy exists the class is not re-imported.  Note that in the "
"implementation, the class and its parent classes need to be imported. These "
"parent classes are also cached."
msgstr ""
"すべてのtvtk関連コードが生成され， `tvtk_classes.zip` ファイルに保存されます． `tvtk` "
"インスタンスは，基本的にはTVTKクラスのインスタンスです．これは `tvtk_helper.py` "
"で定義されています．このファイルはZIPファイル内にあります．TVTKは，ラップされた各VTKクラスに対して，ラッパーtvtkクラスの名前を持つプロパティーを定義します．プロパティの"
" `get` メソッドは，基本的にZIPファイルから動的にクラスをインポートした後にクラスを返します．これは `get_class` "
"関数で行われます．インポートされた各クラスはキャッシュされ( `_cache` "
"で)，キャッシュされたコピーが存在する場合，クラスは再インポートされません．実装では，クラスとその親クラスをインポートする必要があります．これらの親クラスもキャッシュされます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:228
msgid ""
"`enthought/tvtk/__init__.py` adds the `tvtk_classes.zip` file into "
"`sys.path` and instantiates the TVTK class to provide the `tvtk` instance."
msgstr ""
"`enthought/tvtk/__init__.py` は `tvtk_classes.zip` ファイルを `sys.path` "
"に追加し，TVTKクラスをインスタンス化して `tvtk` インスタンスを提供します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:232
msgid ""
"Note that any files inside the `tvtk_classes.zip` are automatically "
"generated."
msgstr "`tvtk_classes.zip` 内部のファイルは自動的に生成されることに注意してください．"

#: ../../mayavi/docs/source/tvtk/devel.txt:237
msgid "Miscellaneous details"
msgstr "その他の詳細"

#: ../../mayavi/docs/source/tvtk/devel.txt:239
msgid ""
"`tvtk_base.py` defines some important and frequently used traits that are "
"used in tvtk.  It is used by all the tvtk classes.  It provides a couple of "
"useful functions (`get_tvtk_name` and `camel2enthought`) to perform name "
"mangling so one can change the VTK method name to an enthought style name.  "
"The module also provides the function `deref_vtk`, that lets one obtain the "
"underlying VTK object from the tvtk object."
msgstr ""
"`tvtk_base.py` "
"はtvtkで使われるいくつかの重要で頻繁に使われる特性を定義します．すべてのtvtkクラスで使用されます．これは名前のmanglingを行うための便利な関数("
" `get_tvtk_name` と `camel2enthought` "
")をいくつか提供しているので，VTKメソッドの名前を考え抜かれたスタイル名に変更することができます．このモジュールは関数 `deref_vtk` "
"も提供しており，これを使うとtvtkオブジェクトから基礎となるVTKオブジェクトを取得することができます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:250
msgid "Code Generation"
msgstr "コード生成"

#: ../../mayavi/docs/source/tvtk/devel.txt:252
msgid ""
"All the tvtk classes are dynamically generated.  `code_gen.py` is the main "
"driver module that is responsible for this.  Code generation works involves "
"the following steps."
msgstr ""
"すべてのtvtkクラスは動的に生成されます． `code_gen.py` "
"はこれを行う主なドライバモジュールです．コード生成作業には，次の手順が含まれます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:256
msgid ""
"Listing and sorting all the VTK classes into a class hierarchy. This is done"
" by `class_tree.py`.  `ClassTree` basically organizes all the VTK classes "
"into a tree structure.  The tree is organized into \"levels\".  The classes "
"with no bases are at the lowest level (the root) and the higher levels "
"represent classes that have one or more bases.  Each class in the tree is "
"represented as a `Node`. Each node has references to its children and "
"parents.  Thus one can walk the entire class hierarchy given a single node."
"  This is fairly generic code and will work with any class hierarchy.  Its "
"main function is to allow us to generate the classes in the right order and "
"also allows us to easily find the parents and children of a class in a class"
" hierarchy.  More details are in the file `class_tree.py`.  UTSL."
msgstr ""
"すべてのVTKクラスをクラス階層にリストしてソートします．これは `class_tree.py` によって行われます． `ClassTree` "
"は基本的にすべてのVTKクラスをツリー構造にまとめます．ツリーは \"levels\" "
"に編成されます．基底を持たないクラスは最下位レベル(root)にあり，上位レベルは基底を持つクラスを表します．ツリー内の各クラスは， `Node` "
"として表されます．各ノードには，その子および親への参照があります．したがって，1つのノードを指定してクラス階層全体をウォークできます．これはかなり汎用的なコードであり，どのクラス階層でも動作します．その主な機能は，適切な順序でクラスを生成できるようにすることと，クラス階層内のクラスの親と子を簡単に見つけることです．詳細は"
" `class_tree.py` ．UTSLファイルを参照してください．"

#: ../../mayavi/docs/source/tvtk/devel.txt:270
msgid ""
"Parsing the methods of each VTK class and categorizing them.  This step also"
" involves finding the default values of the state of the VTK objects, the "
"valid range of values etc.  This entire functionality is provided by "
"`vtk_parser.py`.  VTK parser module is completely self documenting and the "
"public interface is fairly simple.  The `VTKMethodParser` by default uses an"
" instance of the `ClassTree` class to do some of its work (the use of the "
"`ClassTree` can be turned off though)."
msgstr ""
"各VTKクラスのメソッドを解析し，分類します．このステップには，VTKオブジェクトの状態のデフォルト値や，値の有効な範囲などを見つけることも含まれます．この全機能は"
" `vtk_parser.py` によって提供されます．VTKパーサーモジュールは完全に自己文書化されており，公開インターフェースはかなり単純です． "
"`VTKMethodParser` は，デフォルトで `ClassTree` クラスのインスタンスを使用して，その作業の一部を実行します(ただし， "
"`ClassTree` の使用はオフにすることができます．)．"

#: ../../mayavi/docs/source/tvtk/devel.txt:279
msgid ""
"Formatting the output code correctly (indentation).  This is handled by the "
"`indenter.Indent` class.  The `Indent` class lets us format a code-string "
"suitably so that the code is formatted at the current indentation level."
msgstr ""
"出力コードを正しくフォーマットする (インデント) ．これは `indenter.Indent` クラスによって処理されます． `Indent` "
"クラスを使用すると，コードが現在のインデントレベルでフォーマットされるように，コード文字列を適切にフォーマットできます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:284
msgid ""
"Massaging VTK documentation suitably.  This is done by "
"`indenter.VTKDocMassager`."
msgstr "VTK文書を適切にマッサージする．これは `indenter.VTKDocMassager` によって行われます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:287
msgid "Generating the tvtk code.  Done mainly by `code_gen.py`."
msgstr "tvtkコードの生成．主に `code_gen.py` が担当．"

#: ../../mayavi/docs/source/tvtk/devel.txt:289
msgid "Generating a ZIP file of the code, also done by `code_gen.py`."
msgstr "コードのZIPファイルを生成します．これも `code_gen.py` によって行われます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:292
msgid ""
"The `code_gen` module defines a `TVTKGenerator` class that drives the code "
"generation.  The module uses the `wrapper_gen` module to generate the "
"wrapper classes."
msgstr ""
"`code_gen` モジュールはコード生成を駆動する `TVTKGenerator` クラスを定義します．モジュールは `wrapper_gen` "
"モジュールを使用してラッパークラスを生成します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:296
msgid ""
"The `wrapper_gen` defines a `WrapperGenerator` class.  An instance of this "
"class creates an instance of the `VTKMethodParser` (and uses its internal "
"`ClassTree` instance).  `TVTKGenerator` uses this class tree."
msgstr ""
"`wrapper_gen` は `WrapperGenerator` クラスを定義します．このクラスのインスタンスは， "
"`VTKMethodParser`  (内部 `ClassTree` インスタンスを使用します．)のインスタンスを作成します． "
"`TVTKGenerator` はこのクラス・ツリーを使用します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:300
msgid ""
"For each class in the VTK hierarchy (starting from classes at the root of "
"the tree), the class is parsed, and a suitable tvtk wrapper class (with the "
"name of the class and file name of the module suitably modified) is "
"generated using the functionality provided by `WrapperGenerator`.  A "
"separate `tvtk_helper` module (described in the `The magical tvtk instance`_"
" section) is also simultaneously updated with the class for which the "
"wrapper is generated.  All of these classes are dumped into a temporary "
"directory.  These classes are then put into a ZIP file."
msgstr ""
"VTK階層の各クラス(ツリーのルートにあるクラスから開始)に対して，そのクラスが構文解析され， `WrapperGenerator` "
"が提供する機能を使って適切なtvtkラッパークラス(クラス名とモジュールのファイル名を適切に変更したもの)が生成されます．また，個別の "
"`tvtk_helper` モジュール( `The magical tvtk instance`_ "
"セクションで説明する)も，ラッパーが生成されたクラスと同時に更新されます．これらのクラスはすべて一時ディレクトリにダンプされます．これらのクラスはZIPファイルに入れられます．"

#: ../../mayavi/docs/source/tvtk/devel.txt:310
msgid ""
"The `tvtk_helper.py` code is generated by the `HelperGenerator` class. The "
"other tvtk classes are generated by the `WrapperGenerator` class. "
"'WrapperGenerator` also makes use of the `SpecialGenerator` to write special"
" code for some of the VTK classes."
msgstr ""
"`tvtk_helper.py` コードは `HelperGenerator` クラスによって生成されます．その他のtvtkクラスは "
"`WrapperGenerator` クラスによって生成されます．また， 'WrapperGenerator` は `SpecialGenerator`"
" を利用して，VTKクラスのいくつかに特別なコードを作成します．"

#: ../../mayavi/docs/source/tvtk/devel.txt:315
msgid ""
"`TVTKGenerator` uses the other code generators and drives the entire code "
"generation process, builds a ZIP file and optionally cleans up the temporary"
" directory where the wrapper code was written."
msgstr ""
"`TVTKGenerator` "
"は他のコードジェネレータを使用し，コード生成プロセス全体を駆動し，ZIPファイルを構築し，オプションでラッパーコードが書かれた一時ディレクトリをクリーンアップします．"

#: ../../mayavi/docs/source/tvtk/devel.txt:319
msgid "Please run the following::"
msgstr "次のコマンドを実行してください:"

#: ../../mayavi/docs/source/tvtk/devel.txt:323
msgid ""
"To see a list of options to the code generator.  Some of the options are "
"extremely useful during development.  For example do this to generate the "
"code for a few classes alone::"
msgstr ""
"コードジェネレータのオプションのリストを表示します．オプションの中には，開発中に非常に役立つものもあります．たとえば，いくつかのクラスだけのコードを生成するには，次のようにします．"

#: ../../mayavi/docs/source/tvtk/devel.txt:330
msgid ""
"The `-n` option ensures that '/tmp/tvtk_tmp' is not removed.  `-z` inhibits "
"ZIP file generation."
msgstr "`-n` オプションは， '/tmp/tvtk_tmp' が削除されないことを保証します． `-z` はZIPファイルの生成を禁止します．"
